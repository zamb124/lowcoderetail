[tool.poetry]
name = "frontend-service"
version = "0.1.0"
description = "Backend-for-Frontend service using core_sdk"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [{include = "app", from = "."}]

[tool.poetry.dependencies]
python = "^3.11" # Убедитесь, что версия совместима с SDK
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.1"}
pydantic = "^2.6.3"
pydantic-settings = "^2.2.1"
python-dotenv = "^1.0.1"
httpx = "^0.27.0" # Нужен для SDK HTTP клиента

# Зависимости SDK (предполагается, что SDK установлен или доступен локально)
# Укажите правильный путь или версию
# core_sdk = { path = "../../core_sdk", develop = true } # Если SDK рядом
# core_sdk = "^0.1.0" # Если SDK установлен как пакет

# Зависимости для WebSocket (FastAPI/Starlette их предоставляют, но можно указать явно)
websockets = "^12.0"

# Redis для WebSocket менеджера (если используется Redis)
redis = {version = "^5.0.1", extras = ["hiredis"], optional = true} # Делаем опциональным

# Jinja2 (нужен для рендеринга шаблонов из SDK)
jinja2 = "^3.1.3"

[tool.poetry.extras]
redis = ["redis"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.5"
requests = "^2.31.0" # Для простых HTTP запросов в тестах, если нужно

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [".", "../.."] # Добавляем корень проекта для импорта core_sdk
asyncio_mode = "auto"
# Добавьте другие настройки pytest, если нужно