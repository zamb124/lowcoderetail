version: '3.8'

services:
  # --- База данных PostgreSQL ---
  db:
    image: postgres:15-alpine
    container_name: platform_db # Общее имя для БД платформы
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-main_user} # Используем переменные окружения или дефолты
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-main_password}
      POSTGRES_DB: ${POSTGRES_INIT_DB:-main_db} # База для инициализации, может быть не основной
      # Переменные для init-db.sh
      CORE_DB_USER: ${CORE_DB_USER:-core_user}
      CORE_DB_PASSWORD: ${CORE_DB_PASSWORD:-your_strong_password_core}
      CORE_DB_NAME: ${CORE_DB_NAME:-core_db}
      FRONTEND_DB_USER: ${FRONTEND_DB_USER:-frontend_user} # Если frontend-у нужна своя БД (маловероятно)
      FRONTEND_DB_PASSWORD: ${FRONTEND_DB_PASSWORD:-your_strong_password_frontend}
      FRONTEND_DB_NAME: ${FRONTEND_DB_NAME:-frontend_db}
      PURCHASE_DB_USER: ${PURCHASE_DB_USER:-purchase_user}
      PURCHASE_DB_PASSWORD: ${PURCHASE_DB_PASSWORD:-your_strong_password_purchase}
      PURCHASE_DB_NAME: ${PURCHASE_DB_NAME:-purchase_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - platform-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ] # $$ для экранирования в docker-compose
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- Кэш Redis ---
  redis:
    image: redis:7-alpine
    container_name: platform_redis
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - platform-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- Core Service (API + Worker) ---
  core:
    build:
      context: . # Контекст - корень проекта
      dockerfile: ./apps/core/Dockerfile # Путь к Dockerfile сервиса
    container_name: platform_core_service
    env_file:
      - ./apps/core/.env
    volumes:
      # Для разработки: монтируем код для live reload
      - ./apps/core/app:/app/app
      - ./core_sdk:/app/core_sdk
      # Если core должен вызывать другие сервисы, и их схемы не в SDK:
      # - ./apps/purchase/app/schemas:/app/apps/purchase/app/schemas:ro # Пример
    ports:
      - "${CORE_PORT:-8000}:8000" # Порт для API
    networks:
      - platform-net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Команда для запуска API и Worker (можно разделить на два сервиса, если нужно масштабировать отдельно)
    # Для простоты пока объединим, но лучше разделить для production
    command: /start-core.sh # Используем стартовый скрипт
    restart: unless-stopped

  # --- Frontend Service (BFF) ---
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: platform_frontend_bff
    env_file:
      - ./apps/frontend/.env
    volumes:
      - ./apps/frontend/app:/app/app
      - ./core_sdk:/app/core_sdk
      # Frontend-у нужны схемы Core для ModelRegistry
      - ./apps/core/app/schemas:/app/apps/core/app/schemas:ro
      - ./apps/core/app/models:/app/apps/core/app/models:ro # Если модели Core нужны для RemoteConfig
      # Если frontend вызывает purchase:
      # - ./apps/purchase/app/schemas:/app/apps/purchase/app/schemas:ro
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    networks:
      - platform-net
    depends_on:
      core: # Зависит от API core
        condition: service_started # Или service_healthy, если у core есть healthcheck API
      # db и redis могут не быть прямыми зависимостями, если все через core
    command: uvicorn apps.frontend.app.main:app --host 0.0.0.0 --port 8080 --reload # Используем apps.frontend...
    restart: unless-stopped

  # --- Purchase Service (API + Worker) ---
  purchase:
    build:
      context: .
      dockerfile: ./apps/purchase/Dockerfile
    container_name: platform_purchase_service
    env_file:
      - ./apps/purchase/.env
    volumes:
      - ./apps/purchase/app:/app/app
      - ./core_sdk:/app/core_sdk
      # Если purchase должен вызывать core и его схемы не в SDK:
      # - ./apps/core/app/schemas:/app/apps/core/app/schemas:ro
    ports:
      - "${PURCHASE_PORT:-8002}:8002" # Порт для API
    networks:
      - platform-net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: /start-purchase.sh # Используем стартовый скрипт
    restart: unless-stopped

  # --- Docs Service ---
  docs:
    build:
      context: .
      dockerfile: docs/Dockerfile
    container_name: platform_docs
    ports:
      - "${DOCS_PORT:-8099}:8000"
    volumes:
      - ./docs:/app/docs_src/docs:ro
      - ./mkdocs.yml:/app/docs_src/mkdocs.yml:ro
      - ./core_sdk:/app/docs_src/core_sdk:ro
      - ./apps:/app/docs_src/apps:ro # Монтируем все сервисы для mkdocstrings
    networks:
      - platform-net
    restart: unless-stopped

networks:
  platform-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local