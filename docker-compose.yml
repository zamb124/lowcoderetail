services:
  # --- База данных PostgreSQL ---
  db:
    image: postgres:15-alpine
    container_name: egrocery_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh # Убедитесь, что этот скрипт существует и корректен
    environment:
      POSTGRES_USER: main_user
      POSTGRES_PASSWORD: main_password # Замените на надежный пароль
      POSTGRES_DB: main_db
    ports:
      - "5432:5432"
    networks:
      - egrocery-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Добавлено для перезапуска БД при сбоях

  # --- Кэш Redis ---
  redis:
    image: redis:7-alpine
    container_name: egrocery_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - egrocery-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Добавлено для перезапуска Redis при сбоях

  # --- Core Service (API) ---
  core:
    build:
      context: ./apps/core
      dockerfile: Dockerfile
    container_name: egrocery_core_api # Переименовано для ясности
    env_file:
      - ./apps/core/.env
    volumes:
      # Монтируем код для live reload в режиме разработки
      # В production используйте образ с уже скопированным кодом
      - ./apps/core:/app # Монтируем всю директорию core в /app контейнера
      # - ./core/app:/app/app # Старый вариант, может быть менее удобен
      # - ./core/core_sdk:/app/core_sdk # Старый вариант
    ports:
      - "8000:8000"
    networks:
      - egrocery-net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Команда для запуска API с Uvicorn
    # Для production используйте Gunicorn + Uvicorn workers
    command: uvicorn apps.core.app.main:app --host 0.0.0.0 --port 8000 --reload # Оставляем reload для разработки
    restart: unless-stopped # Добавлено для перезапуска API при сбоях

  # --- Core Service (Worker) ---
  core-worker:
    build:
      context: ./core # Используем тот же контекст и Dockerfile, что и для API
      dockerfile: Dockerfile
    container_name: egrocery_core_worker
    env_file:
      - ./apps/core/.env # Используем те же переменные окружения
    volumes:
      # Монтируем код для live reload в режиме разработки
      # В production используйте образ с уже скопированным кодом
      - ./apps/core:/app # Монтируем всю директорию core в /app контейнера
    networks:
      - egrocery-net
    depends_on:
      db:
        condition: service_healthy # Воркеру нужна БД
      redis:
        condition: service_healthy # Воркеру нужен Redis (для Taskiq)
      # Не зависит от core API, но может стартовать параллельно или чуть позже
    # Команда для запуска воркера Taskiq
    # Используем путь к экземпляру брокера и хуки из worker.py
    command: >
      taskiq worker
      core.app.worker:broker
      --reload
      --fs-discover
      --on-startup core.app.worker:startup
      --on-shutdown core.app.worker:shutdown
      # Можно добавить другие опции Taskiq, например, --workers N
    restart: unless-stopped # Добавлено для перезапуска воркера при сбоях
  docs:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: docs/Dockerfile # Указываем наш Dockerfile для документации
    container_name: egrocery_docs
    ports:
      - "8099:8000" # Маппим порт 8099 хоста на порт 8000 контейнера (где слушает mkdocs)
    volumes:
      # Монтируем исходники документации для live-reload при изменениях
      - ./docs:/app/docs_src/docs:ro # :ro (read-only) если не хотите случайных изменений из контейнера
      - ./mkdocs.yml:/app/docs_src/mkdocs.yml:ro
      # Монтируем core_sdk, чтобы mkdocstrings видел изменения в docstrings SDK
      - ./core_sdk:/app/docs_src/core_sdk:ro
      # Если документация зависит от кода других сервисов (маловероятно для mkdocstrings, но возможно)
      # - ./core:/app/docs_src/core:ro # Пример
    networks:
      - egrocery-net # Та же сеть, что и у других сервисов (не обязательно, но удобно)
    restart: unless-stopped
    # Можно добавить depends_on, если документация должна стартовать после чего-то,
    # но обычно это независимый сервис.
    # depends_on:
    #   core:
    #     condition: service_started
  # --- WMS Service ---

# --- Сети ---
networks:
  egrocery-net:
    driver: bridge

# --- Тома ---
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local